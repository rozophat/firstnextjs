{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/phatnguyen/Projects/NextJsApp/components/BookDetails.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { getBookQuery } from '../queries/queries';\n\nvar BookDetails = /*#__PURE__*/function (_Component) {\n  _inherits(BookDetails, _Component);\n\n  var _super = _createSuper(BookDetails);\n\n  function BookDetails() {\n    _classCallCheck(this, BookDetails);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(BookDetails, [{\n    key: \"displayBookDetails\",\n    value: function displayBookDetails() {\n      var _this = this;\n\n      var book = this.props.data.book;\n\n      if (book) {\n        return __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 11,\n            columnNumber: 17\n          }\n        }, __jsx(\"h2\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12,\n            columnNumber: 21\n          }\n        }, book.name), __jsx(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13,\n            columnNumber: 21\n          }\n        }, book.genre), __jsx(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 21\n          }\n        }, book.author.name), __jsx(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 21\n          }\n        }, \"All books by this author:\"), __jsx(\"ul\", {\n          className: \"other-books\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 21\n          }\n        }, book.author.books.map(function (item) {\n          return __jsx(\"li\", {\n            key: item.id,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 18,\n              columnNumber: 36\n            }\n          }, item.name);\n        })));\n      } else {\n        return __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 21\n          }\n        }, \"No book selected...\");\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        id: \"book-details\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }\n      }, this.displayBookDetails());\n    }\n  }]);\n\n  return BookDetails;\n}(Component);\n\nexport default graphql(getBookQuery, {\n  options: function options(props) {\n    return {\n      variables: {\n        id: props.bookId\n      }\n    };\n  }\n})(BookDetails);","map":{"version":3,"sources":["/Users/phatnguyen/Projects/NextJsApp/components/BookDetails.js"],"names":["React","Component","graphql","getBookQuery","BookDetails","book","props","data","name","genre","author","books","map","item","id","displayBookDetails","options","variables","bookId"],"mappings":";;;;;;;;;;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,YAAT,QAA6B,oBAA7B;;IAEMC,W;;;;;;;;;;;;;yCACkB;AAAA;;AAAA,UACRC,IADQ,GACC,KAAKC,KAAL,CAAWC,IADZ,CACRF,IADQ;;AAEhB,UAAGA,IAAH,EAAQ;AACJ,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAMA,IAAI,CAACG,IAAX,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKH,IAAI,CAACI,KAAV,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKJ,IAAI,CAACK,MAAL,CAAYF,IAAjB,CAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAJJ,EAKI;AAAI,UAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACMH,IAAI,CAACK,MAAL,CAAYC,KAAZ,CAAkBC,GAAlB,CAAsB,UAAAC,IAAI,EAAI;AAC5B,iBAAO;AAAI,YAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAoBD,IAAI,CAACL,IAAzB,CAAP;AACH,SAFC,CADN,CALJ,CADJ;AAaH,OAdD,MAcO;AACH,eAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAR;AACH;AACJ;;;6BACO;AACJ,aACI;AAAK,QAAA,EAAE,EAAC,cAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACM,KAAKO,kBAAL,EADN,CADJ;AAKH;;;;EA3BqBd,S;;AA8B1B,eAAeC,OAAO,CAACC,YAAD,EAAe;AACjCa,EAAAA,OAAO,EAAE,iBAACV,KAAD,EAAW;AAChB,WAAO;AACHW,MAAAA,SAAS,EAAE;AACPH,QAAAA,EAAE,EAAER,KAAK,CAACY;AADH;AADR,KAAP;AAKH;AAPgC,CAAf,CAAP,CAQZd,WARY,CAAf","sourcesContent":["\nimport React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { getBookQuery } from '../queries/queries';\n\nclass BookDetails extends Component {\n    displayBookDetails(){\n        const { book } = this.props.data;\n        if(book){\n            return(\n                <div>\n                    <h2>{ book.name }</h2>\n                    <p>{ book.genre }</p>\n                    <p>{ book.author.name }</p>\n                    <p>All books by this author:</p>\n                    <ul className=\"other-books\">\n                        { book.author.books.map(item => {\n                            return <li key={item.id}>{ item.name }</li>\n                        })}\n                    </ul>\n                </div>\n            );\n        } else {\n            return( <div>No book selected...</div> );\n        }\n    }\n    render(){\n        return(\n            <div id=\"book-details\">\n                { this.displayBookDetails() }\n            </div>\n        );\n    }\n}\n\nexport default graphql(getBookQuery, {\n    options: (props) => {\n        return {\n            variables: {\n                id: props.bookId\n            }\n        }\n    }\n})(BookDetails);"]},"metadata":{},"sourceType":"module"}