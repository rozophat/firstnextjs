{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/phatnguyen/Projects/NextJsApp/pages/index.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../components/MyLayout';\nimport BookList from '../components/BookList';\nimport AddBook from '../components/AddBook';\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo'; // apollo client setup\n\nvar client = new ApolloClient({\n  uri: 'http://localhost:3001/graph'\n});\n\nvar Index = function Index(props) {\n  return __jsx(ApolloProvider, {\n    client: client,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 3\n    }\n  }, __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, __jsx(BookList, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }), __jsx(AddBook, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }))) // <Layout>\n  //   <h1>Batman TV Shows</h1>\n  //   <ul>\n  //     {props.shows.map(show => (\n  //       <li key={show.id}>\n  //         <Link href=\"/p/[id]\" as={`/p/${show.id}`}>\n  //           <a>{show.name}</a>\n  //         </Link>\n  //       </li>\n  //     ))}\n  //   </ul>\n  // </Layout>\n  ;\n}; // Index.getInitialProps = async function() {\n//   const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n//   const data = await res.json();\n//   console.log(`Show data fetched. Count: ${data.length}`);\n//   return {\n//     shows: data.map(entry => entry.show)\n//   };\n// };\n// export default Index;\n// import { useRouter } from 'next/router';\n// import useSWR from 'swr';\n// function fetcher(url) {\n//   return fetch(url).then(r => r.json());\n// }\n// export default function Index() {\n//   const { query } = useRouter();\n//   const { data, error } = useSWR(\n//     `/api/randomQuote${query.author ? '?author=' + query.author : ''}`,\n//     fetcher\n//   );\n//   // The following line has optional chaining, added in Next.js v9.1.5,\n//   // is the same as `data && data.author`\n//   const author = data?.author;\n//   let quote = data?.quote;\n//   if (!data) quote = 'Loading...';\n//   if (error) quote = 'Failed to fetch the quote.';\n//   return (\n//     <main className=\"center\">\n//       <div className=\"quote\">{quote}</div>\n//       {author && <span className=\"author\">- {author}</span>}\n//       <style jsx>{`\n//         main {\n//           width: 90%;\n//           max-width: 900px;\n//           margin: 300px auto;\n//           text-align: center;\n//         }\n//         .quote {\n//           font-family: cursive;\n//           color: #e243de;\n//           font-size: 24px;\n//           padding-bottom: 10px;\n//         }\n//         .author {\n//           font-family: sans-serif;\n//           color: #559834;\n//           font-size: 20px;\n//         }\n//       `}</style>\n//     </main>\n//   );\n// }","map":{"version":3,"sources":["/Users/phatnguyen/Projects/NextJsApp/pages/index.js"],"names":["Layout","BookList","AddBook","Link","fetch","ApolloClient","ApolloProvider","client","uri","Index","props"],"mappings":";;;;;AAAA,OAAOA,MAAP,MAAmB,wBAAnB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B,C,CAEA;;AACA,IAAMC,MAAM,GAAG,IAAIF,YAAJ,CAAiB;AAC9BG,EAAAA,GAAG,EAAE;AADyB,CAAjB,CAAf;;AAIA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,KAAK;AAAA,SACjB,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAEH,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADiB,CAOjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBiB;AAAA,CAAnB,C,CAqBA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import Layout from '../components/MyLayout';\nimport BookList from '../components/BookList';\nimport AddBook from '../components/AddBook';\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\n// apollo client setup\nconst client = new ApolloClient({\n  uri: 'http://localhost:3001/graph'\n});\n\nconst Index = props => (\n  <ApolloProvider client={client}>\n    <Layout>\n      <BookList/>\n      <AddBook/>\n    </Layout>\n  </ApolloProvider>\n  // <Layout>\n  //   <h1>Batman TV Shows</h1>\n  //   <ul>\n  //     {props.shows.map(show => (\n  //       <li key={show.id}>\n  //         <Link href=\"/p/[id]\" as={`/p/${show.id}`}>\n  //           <a>{show.name}</a>\n  //         </Link>\n  //       </li>\n  //     ))}\n  //   </ul>\n  // </Layout>\n);\n\n// Index.getInitialProps = async function() {\n//   const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n//   const data = await res.json();\n\n//   console.log(`Show data fetched. Count: ${data.length}`);\n\n//   return {\n//     shows: data.map(entry => entry.show)\n//   };\n// };\n\n// export default Index;\n\n// import { useRouter } from 'next/router';\n// import useSWR from 'swr';\n\n// function fetcher(url) {\n//   return fetch(url).then(r => r.json());\n// }\n\n// export default function Index() {\n//   const { query } = useRouter();\n//   const { data, error } = useSWR(\n//     `/api/randomQuote${query.author ? '?author=' + query.author : ''}`,\n//     fetcher\n//   );\n//   // The following line has optional chaining, added in Next.js v9.1.5,\n//   // is the same as `data && data.author`\n//   const author = data?.author;\n//   let quote = data?.quote;\n\n//   if (!data) quote = 'Loading...';\n//   if (error) quote = 'Failed to fetch the quote.';\n\n//   return (\n//     <main className=\"center\">\n//       <div className=\"quote\">{quote}</div>\n//       {author && <span className=\"author\">- {author}</span>}\n\n//       <style jsx>{`\n//         main {\n//           width: 90%;\n//           max-width: 900px;\n//           margin: 300px auto;\n//           text-align: center;\n//         }\n//         .quote {\n//           font-family: cursive;\n//           color: #e243de;\n//           font-size: 24px;\n//           padding-bottom: 10px;\n//         }\n//         .author {\n//           font-family: sans-serif;\n//           color: #559834;\n//           font-size: 20px;\n//         }\n//       `}</style>\n//     </main>\n//   );\n// }\n\n"]},"metadata":{},"sourceType":"module"}